!function(e,o){"object"==typeof exports&&"object"==typeof module?module.exports=o(require("React")):"function"==typeof define&&define.amd?define(["React"],o):"object"==typeof exports?exports.ReactFormly=o(require("React")):e.ReactFormly=o(e.React)}(this,function(e){return function(e){function o(r){if(t[r])return t[r].exports;var n=t[r]={exports:{},id:r,loaded:!1};return e[r].call(n.exports,n,n.exports,o),n.loaded=!0,n.exports}var t={};return o.m=e,o.c=t,o.p="",o(0)}([function(e,o,t){e.exports.Formly=t(3),e.exports.FieldMixin=t(4),e.exports.FormlyConfig=t(1)},function(e,o){"use strict";function t(e,o){Array.isArray(e)?e.forEach(function(e){t(e)}):"object"==typeof e&&(o=e.field,e=e.name),p[e]=o}function r(){return p}function n(){var e=p;return p={},e}var p={};e.exports={fields:{addType:t,getTypes:r,clearTypes:n}}},function(o,t){o.exports=e},function(e,o,t){"use strict";function r(e,o,t){var r=t+" config.fields field with key "+e.key;return e.type&&e.component?new Error(r+" should only have either a type or a component, not both."):e.type||e.component?void 0:new Error(r+" should have either a type (string) or a component (React component)")}function n(e,o,t){var r=e.component?e.component:u.fields.getTypes()[e.type];if(!r)throw new Error('Formly: "'+e.type+"\" has not been added to FormlyConfig's field types.");return s(e,o)?null:p(r,e,o,t)}function p(e,o,t,r){var n=e({model:t,config:o,onValueUpdate:r,key:o.key});if(o.props){var p="function"==typeof o.props?o.props(t,o):o.props;n=a.addons.cloneWithProps(n,c(p,{key:n.props.key}))}return n}function s(e,o){var t=i(e,"hidden",o);return t&&null!==t}function i(e,o,t){return e.hasOwnProperty(o)?"function"==typeof e[o]?e[o](t,e):!!e[o]:null}var a=t(2),c=t(2),u=t(1),f=a.createClass({displayName:"Formly",propTypes:{onFormlyUpdate:a.PropTypes.func.isRequired,config:a.PropTypes.shape({name:a.PropTypes.string,fields:a.PropTypes.arrayOf(a.PropTypes.shape({key:a.PropTypes.string.isRequired,type:r,component:r,hidden:a.PropTypes.oneOfType([a.PropTypes.bool,a.PropTypes.func]),props:a.PropTypes.oneOfType([a.PropTypes.object,a.PropTypes.func]),data:a.PropTypes.object}))}),model:a.PropTypes.object},getDefaultProps:function(){return{model:{}}},onValueUpdate:function(e,o){this.props.model[e]=o,this.props.onFormlyUpdate(this.props.model)},render:function(){var e=this.props.model,o=this.onValueUpdate,t=this.props.config.fields.map(function(t){return n(t,e,o)});return a.DOM.form({className:"formly",role:"form",name:this.props.config.name},t)}});e.exports=f},function(e,o){"use strict";function t(e){switch(e.type){case"checkbox":case"radio":return e.checked;case"select":return e.selected;default:return e.value}}var r={onChange:function(e){var o=t(e.target);this.updateValue(o)},updateValue:function(e){this.transformUpdate&&(e=this.transformUpdate(e)),this.props.onValueUpdate(this.props.config.key,e)}};e.exports=r}])});
//# sourceMappingURL=react-formly.min.js.map